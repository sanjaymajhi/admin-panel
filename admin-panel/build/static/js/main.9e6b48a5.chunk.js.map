{"version":3,"sources":["components/login.jsx","components/navbar.jsx","components/admin_nav.jsx","components/user_list.jsx","components/addUser.jsx","components/admin.jsx","components/user.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","e","name","target","value","setState","login_form_submit","preventDefault","overlay","document","querySelector","style","display","fetch","method","body","JSON","stringify","state","headers","then","res","json","data","saved","localStorage","setItem","token","setLastActive","loginNavHandler","admin","history","push","errors","getElementById","error","innerHTML","msg","count","map","err","window","location","hash","setTimeout","getItem","email","password","className","id","onSubmit","this","htmlFor","type","required","onChange","position","top","left","Component","Navbar","logout","removeItem","path","to","loggedin","href","onClick","Anav","Userlist","fetchUserList","a","users","disableHandler","replaceWith","user","key","_id","undefined","last_active","Date","toLocaleString","disabled","Adduser","handleSubmit","h2","gridColumn","Admin","exact","render","User","fetchUser","alert","App","component","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9e6b48a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  login_form_submit = (e) => {\n    e.preventDefault();\n    const overlay = document.querySelector(\".overlay\");\n    overlay.style.display = \"block\";\n\n    fetch(\"/api/login/\", {\n      method: \"POST\",\n      body: JSON.stringify({ ...this.state }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.saved === \"success\") {\n          localStorage.setItem(\"token\", data.token);\n          this.setLastActive();\n          this.props.loginNavHandler(true);\n          if (data.admin) {\n            this.props.history.push(\"/admin/user_list\");\n          } else {\n            this.props.history.push(\"/user/profile\");\n          }\n        } else {\n          overlay.style.display = \"none\";\n          const errors = document.getElementById(\"errors\");\n          errors.style.display = \"block\";\n          if (data.error) {\n            errors.innerHTML += data.error.msg;\n          }\n          if (data.errors) {\n            let count = 1;\n            data.errors.map((err) => {\n              errors.innerHTML += \"<p>\" + count + \". \" + err.msg + \"<br/></p>\";\n              count++;\n            });\n          }\n          window.location.hash = \"errors\";\n          setTimeout(function () {\n            errors.style.display = \"none\";\n          }, 10000);\n        }\n      });\n  };\n\n  setLastActive = () => {\n    fetch(\"/api/active\", {\n      method: \"POST\",\n      body: JSON.stringify({ token: localStorage.getItem(\"token\") }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    }).then();\n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <form id=\"login_form\" onSubmit={this.login_form_submit}>\n          <h1>Login Form</h1>\n          <label htmlFor=\"email\">Email ID : </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            required\n            value={this.state.email}\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password : </label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"text\"\n            required\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          <div />\n          <input type=\"submit\" value=\"Login\" />\n        </form>\n        <div id=\"errors\" style={{ display: \"none\" }}>\n          <strong>Errors :</strong>{\" \"}\n        </div>\n        <div className=\"overlay\">\n          <div\n            className=\"circular-loader\"\n            style={{ position: \"absolute\", top: \"45vh\", left: \"45vw\" }}\n          ></div>\n          <p style={{ position: \"absolute\", top: \"60vh\", left: \"43vw\" }}>\n            Verifying Credentials...\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Navbar extends Component {\n  logout = (e) => {\n    localStorage.removeItem(\"token\");\n    this.props.history.push({\n      path: \"/\",\n    });\n  };\n  render() {\n    return (\n      <div className=\"navbar\">\n        <div className=\"nav\">\n          <Link className=\"nav-left\" to=\"/\">\n            <p>Website</p>\n          </Link>\n          {!this.props.loggedin ? (\n            <ul id=\"navdiv1\">\n              <Link to=\"/login\">\n                <li>Login</li>\n              </Link>\n            </ul>\n          ) : (\n            <ul id=\"navdiv2\">\n              <li>\n                <a href=\"/\" onClick={this.logout}>\n                  Log Out\n                </a>\n              </li>\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Anav extends Component {\n  render() {\n    return (\n      <div className=\"a_nav\">\n        <h2>Menu</h2>\n        <Link to=\"/admin/user_list\">\n          <p>\n            <i className=\"material-icons\"> format_list_bulleted</i> User List{\" \"}\n          </p>\n        </Link>\n        <Link to=\"/admin/addUser\">\n          <p>\n            <i className=\"material-icons\">add_box</i>Add User{\" \"}\n          </p>\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Anav;\n","import React, { Component } from \"react\";\n\nclass Userlist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      users: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUserList();\n  }\n\n  fetchUserList = () => {\n    const overlay = document.querySelector(\".overlay\");\n    overlay.style.display = \"block\";\n    fetch(\"/api/list/\", {\n      method: \"POST\",\n      body: JSON.stringify({ token: localStorage.getItem(\"token\") }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(async (data) => {\n        if (data.saved === \"unsuccessful\") {\n          const errors = document.getElementById(\"errors\");\n          errors.innerHTML += data.error.msg;\n          window.location.hash = \"errors\";\n          setTimeout(function () {\n            errors.style.display = \"none\";\n            errors.innerHTML = \"Errors : \";\n          }, 10000);\n        } else {\n          await this.setState({ users: data });\n        }\n        overlay.style.display = \"none\";\n      });\n  };\n\n  disableHandler = (e) => {\n    e.preventDefault();\n    const id = e.target.id;\n    fetch(\"/api/disable\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        token: localStorage.getItem(\"token\"),\n        email: e.target.id,\n      }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.saved === \"success\") {\n          document.getElementById(id).replaceWith(\"blocked\");\n        }\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>User List</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Password</th>\n              <th>Last Active</th>\n              <th>Disable</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.users.map((user) => (\n              <tr key={user._id}>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n                <td>{user.password}</td>\n                <td>\n                  {user.last_active === undefined\n                    ? \"No logins\"\n                    : new Date(user.last_active).toLocaleString()}\n                </td>\n                <td>\n                  {user.disabled ? (\n                    \"Blocked\"\n                  ) : (\n                    <button id={user.email} onClick={this.disableHandler}>\n                      Disable\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <p id=\"errors\" style={{ display: \"none\" }}>\n          Errors :{\" \"}\n        </p>\n        <div className=\"overlay\">\n          <div\n            className=\"circular-loader\"\n            style={{ position: \"absolute\", top: \"45vh\", left: \"45vw\" }}\n          ></div>\n          <p style={{ position: \"absolute\", top: \"60vh\", left: \"43vw\" }}>\n            Please Wait...\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Userlist;\n","import React, { Component } from \"react\";\nclass Adduser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  handleChange = async (e) => {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    await this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const overlay = document.querySelector(\".overlay\");\n    overlay.style.display = \"block\";\n    fetch(\"/api/add_user\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        ...this.state,\n        token: localStorage.getItem(\"token\"),\n      }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.saved === \"success\") {\n          const h2 = document.getElementById(\"saved\");\n          h2.innerHTML = \"User successfully created...\";\n          h2.style.display = \"block\";\n        } else {\n          let errors = document.getElementById(\"errors\");\n          errors.style.display = \"block\";\n          if (data.error) {\n            errors.innerHTML += data.error.msg;\n          }\n          if (data.errors) {\n            data.errors.map((err) => {\n              errors.innerHTML += \"<p>\" + err.msg + \"<br/></p>\";\n            });\n          }\n          window.location.hash = \"errors\";\n          setTimeout(function () {\n            errors.style.display = \"none\";\n            errors.innerHTML = \"Errors : \";\n          }, 10000);\n        }\n        overlay.style.display = \"none\";\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit} id=\"login_form\">\n          <h2 style={{ gridColumn: \"span 2\" }}>Add User</h2>\n          <label htmlFor=\"name\">Name : </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"email\">Email : </label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            required\n            value={this.state.email}\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"password\">Password : </label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            required\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          <div />\n          <input type=\"submit\" value=\"Save User\" />\n        </form>\n        <h2 id=\"saved\" style={{ display: \"none\" }}></h2>\n        <p id=\"errors\">Errors : </p>\n        <div className=\"overlay\">\n          <div\n            className=\"circular-loader\"\n            style={{ position: \"absolute\", top: \"45vh\", left: \"45vw\" }}\n          ></div>\n          <p style={{ position: \"absolute\", top: \"60vh\", left: \"43vw\" }}>\n            Verifying Credentials...\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Adduser;\n","import React, { Component } from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport Anav from \"./admin_nav\";\nimport Userlist from \"./user_list\";\nimport Adduser from \"./addUser\";\n\nclass Admin extends Component {\n  render() {\n    return (\n      <div className=\"admin\">\n        <Anav />\n\n        <Switch>\n          <Route\n            path=\"/admin/user_list\"\n            exact\n            render={(props) => <Userlist {...props} />}\n          />\n          <Route\n            path=\"/admin/addUser\"\n            exact\n            render={(props) => <Adduser {...props} />}\n          />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default Admin;\n","import React, { Component } from \"react\";\nclass User extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n    };\n  }\n  componentDidMount() {\n    this.fetchUser();\n  }\n\n  fetchUser = () => {\n    fetch(\"/api/profile\", {\n      method: \"POST\",\n      body: JSON.stringify({ token: localStorage.getItem(\"token\") }),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(async (data) => {\n        if (data.saved === \"unsuccessful\") {\n          alert(\"You are not logged in...\");\n          this.props.history.push(\"/login\");\n        } else {\n          await this.setState({\n            name: data.name,\n            email: data.email,\n          });\n        }\n      });\n  };\n  render() {\n    return (\n      <div className=\"main\">\n        <div id=\"login_form\">\n          <h2 style={{ gridColumn: \"span 2\" }}>Profile</h2>\n          <h2>Name :</h2>\n          <h2>{this.state.name}</h2>\n          <h2>Email :</h2>\n          <h2>{this.state.email}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default User;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Navbar from \"./components/navbar\";\nimport Admin from \"./components/admin\";\nimport User from \"./components/user\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedin: false,\n    };\n  }\n\n  loginNavHandler = (value) => {\n    this.setState({ loggedin: value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar loggedin={this.state.loggedin} />\n          <Switch>\n            <Route path=\"/\" exact>\n              <h2>Welcome To Website</h2>\n            </Route>\n            <Route\n              path=\"/login/\"\n              render={(props) => (\n                <Login {...props} loginNavHandler={this.loginNavHandler} />\n              )}\n            />\n            <Route path=\"/admin/\" component={Admin} />\n            <Route path=\"/user/profile\" component={User} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}